apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: trigger-gitlab-pipeline
  namespace: tap-tasks
  labels:
    app.kubernetes.io/version: "0.1"
  annotations:
    tekton.dev/pipelines.minVersion: "0.12.1"
    tekton.dev/categories: Git
    tekton.dev/tags: gitlab
    tekton.dev/displayName: "trigger gitlab pipeline"
    tekton.dev/platforms: "linux/amd64"
spec:
  description: >-
    This `task` can be used to tigger a gitlab pipelne.

  params:
    - name: PROJECT_PATH
      description: ex bmoussaud/playlist-service-springboot
      type: string
      default: "empty"
    - name: BRANCH
      type: string
      default: "main"
    - name: GITLAB_DOMAIN
      type: string
      description: ex gitlab.com
      default: "gitlab.com"
    - name: GITLAB_TOKEN_SECRET
      type: string
      description: Name of the secret holding the gitlab-token.
      default: gitlab-token
    - name: GITLAB_TOKEN_SECRET_KEY
      type: string
      description: Name of the secret key holding the gitlab-token.
      default: GITLAB_TOKEN
    - name: TRIGGER_TOKEN_SECRET_KEY
      type: string
      description: Name of the secret key holding the trigger token
      default: TRIGGER_TOKEN
  steps:
    - name: trigger-gitlab-pipeline
      image: trigger-gitlab-pipeline
      script: |
        #!/usr/bin/env bash

        PROJECT_PATH=$(params.PROJECT_PATH)
        BRANCH=$(params.BRANCH)
        GITLAB_DOMAIN=$(params.GITLAB_DOMAIN)
        #GITLAB_TOKEN=glpat-dqsdqsdqsdqsd
        #TRIGGER_TOKEN=glptt-dqsdqsdqdqsqs

        OUT_FILE=$(mktemp)

        echo "GITLAB_DOMAIN ${GITLAB_DOMAIN}"
        echo "PROJECT_PATH  ${PROJECT_PATH}"
        echo "BRANCH        ${BRANCH}"
        #echo "GITLAB_TOKEN        ${GITLAB_TOKEN}"
        #echo "TRIGGER_TOKEN        ${TRIGGER_TOKEN}"

        #urlencoded_path="${PROJECT_PATH//'\/'/%2f}" # use `urlencode` if installed, but this works in a pinch
        ENCODED_PATH=$(echo ${PROJECT_PATH} | sed 's/\//%2f/g')
        #echo "ENCODED_PATH    ${ENCODED_PATH}"
        curl --silent --header "PRIVATE-TOKEN: ${GITLAB_TOKEN}" https://gitlab.com/api/v4/projects/${ENCODED_PATH} >${OUT_FILE}
        PROJECT_ID=$(jq -r .id ${OUT_FILE})
        echo "PROJECT_ID    ${PROJECT_ID}"

        curl --silent --request POST --form token=${TRIGGER_TOKEN} --form ref=${BRANCH} "https://${GITLAB_DOMAIN}/api/v4/projects/${PROJECT_ID}/trigger/pipeline" >${OUT_FILE}

        if [ 0 -eq $? ]; then
            STATUS=$(jq -r .status ${OUT_FILE})
            PIPELINE_ID=$(jq -r .id ${OUT_FILE})
            echo "Pipeline[${PIPELINE_ID}]/Status[${STATUS}]"

            if [ ${STATUS} = "created" ]; then
                  echo -e "\nSuccess, pipeline is triggered.\n"
            else
                  echo -e "\nMost likely something went wrong, check API response:\n"
                  cat ${OUT_FILE}
                  exit 2
            fi
        else
            printf '\nCurl failed with error code "%d"\n' "$?" >&2
            exit 1
        fi

        x=0

        while true; do
            curl --silent --header "PRIVATE-TOKEN: ${GITLAB_TOKEN}" "https://${GITLAB_DOMAIN}/api/v4/projects/${PROJECT_ID}/pipelines/${PIPELINE_ID}" >${OUT_FILE}
            #cat ${OUT_FILE} | jq
            x=$(($x + 1))
            STATUS=$(jq -r .status ${OUT_FILE})
            echo "${x} Pipeline[${PIPELINE_ID}]/Status[${STATUS}]"
            case ${STATUS} in

            created)
                  #echo "__Created"
                  ;;

            success)
                  echo "__Succeed Exit !"
                  exit 0
                  ;;

            running)
                  #echo "__Running"
                  ;;

            *)
                  echo "Unknonw Status ${STATUS}...exit"
                  exit 1
                  ;;
            esac
            sleep 10
        done
      env:
        - name: GITLAB_TOKEN
          valueFrom:
            secretKeyRef:
              name: $(params.GITLAB_TOKEN_SECRET)
              key: $(params.GITLAB_TOKEN_SECRET_KEY)
        - name: TRIGGER_TOKEN
          valueFrom:
            secretKeyRef:
              name: $(params.GITLAB_TOKEN_SECRET)
              key: $(params.TRIGGER_TOKEN_SECRET_KEY)
---
apiVersion: kbld.k14s.io/v1alpha1
kind: Config
sources:
  - image: trigger-gitlab-pipeline
    path: trigger-gitlab-pipeline-image
destinations:
  - image: trigger-gitlab-pipeline
    newImage: ghcr.io/bmoussaud/tap-operator
